CONNECT TO Asm2;

DROP TABLE User;
Drop TABLE DRIVER;
DROP TABLE RESTAURANT;
DROP TABLE DELIVERY;
DROP TABLE FOOD;
DROP TABLE PROMOCODE;
DROP TABLE ORDER;
DROP TABLE PAYMENT;
DROP TABLE ORDERDETAILS;
DROP TABLE FEEDBACK;

CREATE TABLE User ( USER_ID INT GENERATED BY DEFAULT AS IDENTITY NOT NULL, USER_FULLNAME VARCHAR(50), USER_CONTACT VARCHAR(12), USER_EMAIL VARCHAR(40), USER_ADDRESS VARCHAR(80), CONSTRAINT USER_PK PRIMARY KEY (USER_ID) );
CREATE TABLE DRIVER (DRIVER_ID VARCHAR (5) NOT NULL, DRIVER_NAME VARCHAR (50), DRIVER_CONTACT VARCHAR (12), CONSTRAINT DRIVER_PK PRIMARY KEY (DRIVER_ID));
CREATE TABLE RESTAURANT (RESTAURANT_ID VARCHAR (5) NOT NULL, RESTAURANT_NAME VARCHAR (25), RESTAURANT_CONTACT VARCHAR (12), RESTAURANT_ADDRESS VARCHAR (80), CONSTRAINT RESTAURANT_PK PRIMARY KEY (RESTAURANT_ID));
CREATE TABLE DELIVERY (DELIVERY_ID VARCHAR (5) NOT NULL, DRIVER_ID VARCHAR (5), PICKUP_TIME TIME, DROPOFF_TIME TIME, CONSTRAINT DELIVERY_PK PRIMARY KEY (DELIVERY_ID), CONSTRAINT DELIVERY_FK_DRIVER FOREIGN KEY (DRIVER_ID) REFERENCES DRIVER );
CREATE TABLE Food (FOOD_ID VARCHAR(10)NOT NULL,FOOD_NAME VARCHAR(30),FOOD_PRICE DECIMAL(6,2),FOOD_DESCRIPTION VARCHAR(100),RESTAURANT_ID VARCHAR(5), CONSTRAINT Food_PK PRIMARY KEY (FOOD_ID), CONSTRAINT Food_FK_RESTAURANT FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANT);
CREATE TABLE PROMOCODE (PROMO_ID VARCHAR(15) NOT NULL, PROMO_VALIDITY DATE, DISCOUNT_PERCENTAGE DECIMAL(4,2), RESTAURANT_ID VARCHAR (5) NOT NULL, CONSTRAINT PROMOCODE_PK PRIMARY KEY (PROMO_ID), CONSTRAINT PROMOCODE_FK_RESTAURANT FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANT);
CREATE TABLE Order ( ORDER_ID VARCHAR(8) NOT NULL, ORDER_DATE DATE, ORDER_TIME TIME, ORDER_PRICE DECIMAL (6,2), ORDER_FINALPRICE DECIMAL (6,2), ORDER_DELIVERYFEE DECIMAL (4,2), ORDER_STATUS VARCHAR(11), USER_ID INT, PROMO_ID VARCHAR(15), CONSTRAINT Order_PK PRIMARY KEY (ORDER_ID), CONSTRAINT Order_FK_User FOREIGN KEY (USER_ID) REFERENCES User, CONSTRAINT Order_FK_PROMOCODE FOREIGN KEY (PROMO_ID) REFERENCES PROMOCODE);
CREATE TABLE Payment ( PAYMENT_ID VARCHAR(8) NOT NULL, PAYMENT_TIME TIME, PAYMENT_METHOD VARCHAR(12), PAYMENT_AMOUNT DECIMAL (6,2), USER_ID INT, ORDER_ID VARCHAR(8), CONSTRAINT Payment_PK PRIMARY KEY (PAYMENT_ID), CONSTRAINT Payment_FK_User FOREIGN KEY (USER_ID) REFERENCES User, CONSTRAINT Payment_FK_Order FOREIGN KEY (ORDER_ID) REFERENCES Order);
CREATE TABLE OrderDetails (ORDER_ID VARCHAR(8) NOT NULL, FOOD_ID VARCHAR(10)NOT NULL, DELIVERY_ID VARCHAR(5), FOOD_QUANTITY INT, TOTAL DECIMAL(7,2), ORDER_REMARKS VARCHAR(100), CONSTRAINT ORDERDETAILS_PK PRIMARY KEY (ORDER_ID,FOOD_ID), CONSTRAINT ORDERDETAILS_FK_Order FOREIGN KEY (ORDER_ID) REFERENCES Order, CONSTRAINT ORDERDETAILS_FK_Food FOREIGN KEY (FOOD_ID) REFERENCES Food, CONSTRAINT ORDERDETAILS_FK_DELIVERY FOREIGN KEY (DELIVERY_ID) REFERENCES DELIVERY );
CREATE TABLE FEEDBACK ( FEEDBACK_ID VARCHAR(10) NOT NULL, FEEDBACK_DETAILS VARCHAR(100), ORDER_ID VARCHAR(8), CONSTRAINT FEEDBACK_PK PRIMARY KEY (FEEDBACK_ID), CONSTRAINT FEEDBACK_FK_ORDER FOREIGN KEY (ORDER_ID) REFERENCES ORDER);

INSERT INTO User (USER_FULLNAME, USER_CONTACT, USER_EMAIL, USER_ADDRESS) VALUES ('ALI MUHAMMAD','012-1111111','ALI@HOTMAIL.COM','No.1, Jalan ABC 1/1, Taman EFG, 12345, Selangor.');
INSERT INTO User (USER_FULLNAME, USER_CONTACT, USER_EMAIL, USER_ADDRESS) VALUES ('Ahmad Ismail','012-1111112','ahmad@hotmail.com','No.2, Jalan ABC 2/2, Taman EFG, 12345, Selangor.');
INSERT INTO User (USER_FULLNAME, USER_CONTACT, USER_EMAIL, USER_ADDRESS) VALUES ('Lily Chia','012-1111113','lily@hotmail.com','No.3, Jalan ABC 3/3, Taman EFG, 12345, Selangor.');
INSERT INTO User (USER_FULLNAME, USER_CONTACT, USER_EMAIL, USER_ADDRESS) VALUES ('Chong Hua Li','012-1111114','chong@hotmail.com','No.4, Jalan ABC 4/4, Taman EFG, 12345, Selangor.');
INSERT INTO User (USER_FULLNAME, USER_CONTACT, USER_EMAIL, USER_ADDRESS) VALUES ('Anderson Heng','012-1111115','anderson@hotmail.com','No.5, Jalan ABC 5/5, Taman EFG, 12345, Selangor.');
INSERT INTO User (USER_FULLNAME, USER_CONTACT, USER_EMAIL, USER_ADDRESS) VALUES ('Belle Leong','012-1111116','belle@hotmail.com','No.6, Jalan ABC 6/6, Taman EFG, 12345, Selangor.');
INSERT INTO User (USER_FULLNAME, USER_CONTACT, USER_EMAIL, USER_ADDRESS) VALUES ('Caryn Khor','012-1111117','caryn@hotmail.com','No.7, Jalan ABC 7/7, Taman EFG, 12345, Selangor.');
INSERT INTO User (USER_FULLNAME, USER_CONTACT, USER_EMAIL, USER_ADDRESS) VALUES ('Elizabeth Tan','012-1111118','elizabeth@hotmail.com','No.8, Jalan ABC 8/8, Taman EFG, 12345, Selangor.');
INSERT INTO User (USER_FULLNAME, USER_CONTACT, USER_EMAIL, USER_ADDRESS) VALUES ('Harry Pang','012-1111119','harry@hotmail.com','No.9, Jalan ABC 9/9, Taman EFG, 12345, Selangor.');
INSERT INTO User (USER_FULLNAME, USER_CONTACT, USER_EMAIL, USER_ADDRESS) VALUES ('Jason Cheong','012-1111120','jason@hotmail.com','No.10, Jalan ABC 10/10, Taman EFG, 12345, Selangor.');

INSERT INTO DRIVER VALUES ('R0001', 'DANIAL AMIR', '011-45875209');
INSERT INTO DRIVER VALUES ('R0002', 'SAMUEL JORGE', '019-6582473');
INSERT INTO DRIVER VALUES ('R0003', 'MARSHALL MATTHEW', '013-7465219');
INSERT INTO DRIVER VALUES ('R0004', 'MUHD NAZMI', '011-56982417');
INSERT INTO DRIVER VALUES ('R0005', 'ALIA HANI', '017-8531054');
INSERT INTO DRIVER VALUES ('R0006', 'ANDRE HARIANTO', '018-6423076');
INSERT INTO DRIVER VALUES ('R0007', 'PHIL MCDONALD', '017-3819168');
INSERT INTO DRIVER VALUES ('R0008', 'KASSIM ALI', '011-58361986');
INSERT INTO DRIVER VALUES ('R0009', 'SAIFUL KAMSAN', '017-1265879');
INSERT INTO DRIVER VALUES ('R0010', 'NURUL HUDA', '018-9417021');

INSERT INTO RESTAURANT VALUES ('L0001', 'D Culture Cafe', '017-2760459', '17, Jalan 1, Taman Sri Ukay, 68000 Ampang, Selangor');
INSERT INTO RESTAURANT VALUES ('L0002', 'Monster. A Garden Cafe', '017-5750558', '40, Jalan 1/77A Off Jalan Imbi, Changkat Thambi Dollah, 55100 Kuala Lumpur,');
INSERT INTO RESTAURANT VALUES ('L0003', 'Eggbeast', '013-9999437', 'LOT 10 Shopping Centre, Jln Sultan Ismail, Bukit Bintang, 50250 Kuala Lumpur');
INSERT INTO RESTAURANT VALUES ('L0004', 'Hoh Coffee', '03-64136761', 'K-G-4, 2, Jalan Solaris, Solaris Mont Kiara, 50480 Kuala Lumpur');
INSERT INTO RESTAURANT VALUES ('L0005', 'Tiny Projects', '012-5492018', '36-2, ss2/66, SS 2, 47300 Petaling Jaya, Selangor');
INSERT INTO RESTAURANT VALUES ('L0006', 'The Butter Post', '03-22023727', '5, Jalan Bangsar Utama 3, Bangsar, 59000 Kuala Lumpur');

INSERT INTO DELIVERY VALUES ('D0001', 'R0001', '13:01', '13:20');
INSERT INTO DELIVERY VALUES ('D0002', 'R0002', '11:43', '11:54');
INSERT INTO DELIVERY VALUES ('D0003', 'R0003', '19:30', '20:00');
INSERT INTO DELIVERY VALUES ('D0004', 'R0004', '21:22', '21:32');
INSERT INTO DELIVERY VALUES ('D0005', 'R0005', '16:59', '17:05');
INSERT INTO DELIVERY VALUES ('D0006', 'R0006', '16:00', '16:10');
INSERT INTO DELIVERY VALUES ('D0007', 'R0007', '12:34', '12:39');
INSERT INTO DELIVERY VALUES ('D0008', 'R0008', '18:00', '18:21');
INSERT INTO DELIVERY VALUES ('D0009', 'R0005', '19:00', '19:23');

INSERT INTO Food VALUES ('NL1002','Nasi Lemak','5.5','Contain cucumber, ikan bilis, boiled egg, sambal','L0001');
INSERT INTO Food VALUES ('AG1003','Fried Chicken','8','Original flavour','L0002');
INSERT INTO Food VALUES ('NK1004','Nasi Kandar','7.5','Contain egg, sambal','L0003');
INSERT INTO Food VALUES ('KS3004','Lamb Soup','12',NULL,'L0004');
INSERT INTO Food VALUES ('CR3006','Chicken Rice','8',NULL,'L0005');
INSERT INTO Food VALUES ('CC4009','Chicken Chop','15','Contain french fries and smashed potato','L0006');
INSERT INTO Food VALUES ('SS4005','Salmon Steak','25','Contain smashed potato and salad','L0001');
INSERT INTO Food VALUES ('FN2004','Fish Noodle','8.5','Contain fish, fish ball and vegetables','L0002');
INSERT INTO Food VALUES ('SN2009','Spicy Noodle','8','Contain fish ball, meat ball and vegetables','L0003');
INSERT INTO Food VALUES ('TS5001','Tomato Spaghetti','15','Carbonara sauce','L0004');

INSERT INTO PROMOCODE VALUES ('ABCD12345','2022-08-31','0.1','L0001');
INSERT INTO PROMOCODE VALUES ('DHUN27833','2022-08-01','0.2','L0002');
INSERT INTO PROMOCODE VALUES ('BCDHU64373','2022-07-22','0.1','L0003');
INSERT INTO PROMOCODE VALUES ('VFDBS37829','2022-03-31','0.4','L0004');
INSERT INTO PROMOCODE VALUES ('BWDGY63279','2022-04-20','0.2','L0005');
INSERT INTO PROMOCODE VALUES ('RYEBR32736','2022-05-15','0.3','L0006');
INSERT INTO PROMOCODE VALUES ('BEDGY63429','2022-05-10','0.3','L0003');

INSERT INTO Order VALUES ('BA10102','2022-01-23','12:32','36','36','3','DELIVERED',4,NULL);
INSERT INTO Order VALUES ('GG19372','2022-03-04','11:20','16.5','14.85','2','DELIVERED',1,'ABCD12345');
INSERT INTO Order VALUES ('TY38937','2022-02-18','18:59','27','27','5','DELIVERED',2,NULL);
INSERT INTO Order VALUES ('HK36792','2022-01-01','21:02','15.5','12.4','4','DELIVERED',3,'DHUN27833');
INSERT INTO Order VALUES ('PY67382','2022-02-02','16:41','15','15','3','DELIVERED',7,NULL);
INSERT INTO Order VALUES ('UG74836','2022-03-03','15:33','147','132.3','6','DELIVERED',9,'BCDHU64373');
INSERT INTO Order VALUES ('OU26293','2022-01-24','12:09','56','56','3','DELIVERED',10,NULL);
INSERT INTO Order VALUES ('AR56489','2022-04-01','10:30','39','39','8','PENDING',4,NULL);
INSERT INTO Order VALUES ('AT84823','2022-04-02','11:43','60','60','5','PENDING',9,NULL);
INSERT INTO Order VALUES ('PL46392','2022-03-31','17:40','54','54','3','DELIVERED',8,NULL);

INSERT INTO Payment VALUES ('PY12013','12:32','CREDIT CARD','39',4,'BA10102');
INSERT INTO Payment VALUES ('PY11021','11:21','GRABPAY','16.85',1,'GG19372');
INSERT INTO Payment VALUES ('PY13212','18:59','GRABPAY','32',2,'TY38937');
INSERT INTO Payment VALUES ('PY19810','21:02','CASH','16.4',3,'HK36792');
INSERT INTO Payment VALUES ('PY74618','16:41','GRABPAY','18',7,'PY67382');
INSERT INTO Payment VALUES ('PY19263','15:33','CREDIT CARD','138.3',9,'UG74836');
INSERT INTO Payment VALUES ('PY89081','12:09','CREDIT CARD','59',10,'OU26293');
INSERT INTO Payment VALUES ('PY93712','17:40','GRABPAY','57',8,'PL46392');

INSERT INTO OrderDetails VALUES('BA10102','NL1002','D0001',2,'11','Need cutlery');
INSERT INTO OrderDetails VALUES('BA10102','SS4005','D0001',1,'25',NULL);
INSERT INTO OrderDetails VALUES('GG19372','AG1003','D0002',1,'8',NULL);
INSERT INTO OrderDetails VALUES('GG19372','FN2004','D0002',1,'8.5',NULL);
INSERT INTO OrderDetails VALUES('TY38937','KS3004','D0003',1,'12','Need Chili');
INSERT INTO OrderDetails VALUES('TY38937','TS5001','D0003',1,'15',NULL);
INSERT INTO OrderDetails VALUES('HK36792','NK1004','D0004',1,'7.5',NULL);
INSERT INTO OrderDetails VALUES('HK36792','SN2009','D0004',1,'8',NULL);
INSERT INTO OrderDetails VALUES('PY67382','TS5001','D0005',1,'15',NULL);
INSERT INTO OrderDetails VALUES('UG74836','NL1002','D0006',4,'22',NULL);
INSERT INTO OrderDetails VALUES('UG74836','SS4005','D0006',5,'125',NULL);
INSERT INTO OrderDetails VALUES('OU26293','CR3006','D0007',7,'56',NULL);
INSERT INTO OrderDetails VALUES('AR56489','NK1004',NULL,2,'15',NULL);
INSERT INTO OrderDetails VALUES('AR56489','SN2009',NULL,3,'24',NULL);
INSERT INTO OrderDetails VALUES('AT84823','CC4009','D0009',4,'60',NULL);
INSERT INTO OrderDetails VALUES('PL46392','KS3004','D0008',2,'24',NULL);
INSERT INTO OrderDetails VALUES('PL46392','TS5001','D0008',2,'30',NULL);

INSERT INTO FEEDBACK VALUES('DE23423','DELIVERY TIME IS SLOW','BA10102');
INSERT INTO FEEDBACK VALUES('FR23123','DELIVERY TIME IS SLOW','GG19372');
INSERT INTO FEEDBACK VALUES('JU23424','FOOD PACKAGING IS BAD','HK36792');

---
--- Aggregate Function
---
--- Counting The Number of Times Each Promo_ID is used ---
SELECT PROMO_ID, COUNT (ORDER_ID) AS NUMBER_OF_TIMES_USED FROM ORDER WHERE PROMO_ID IS NOT NULL GROUP BY PROMO_ID;

---
--- Displaying The Food With The Highest and Lowest Price From Each Restaurant
SELECT RESTAURANT.RESTAURANT_ID, MIN(FOOD_PRICE) AS CHEAPEST_FOOD, MAX(FOOD_PRICE) AS MOST_EXPENSIVE_FOOD, COUNT (FOOD_ID) AS NUMBER_OF_FOOD_SOLD FROM RESTAURANT, FOOD WHERE RESTAURANT.RESTAURANT_ID = FOOD.RESTAURANT_ID GROUP BY RESTAURANT.RESTAURANT_ID;

---
---Group by and Having
---
--- Calculating the Total Quantity of Food Ordered per Order
SELECT ORDER_ID, COUNT(FOOD_ID) AS TYPE_OF_FOOD_ORDERED, SUM (FOOD_QUANTITY) AS TOTAL_NUMBER_OF_FOOD, SUM (TOTAL) AS TOTAL_PRICE FROM ORDERDETAILS GROUP BY ORDER_ID HAVING SUM(TOTAL) >= '20';

--- Listing the Maximum Order Price ordered by the User
SELECT USER.USER_ID, MAX(ORDER_PRICE) AS MAXIMUM_ORDER_PRICE FROM USER, ORDER WHERE USER.USER_ID = ORDER.USER_ID GROUP BY USER.USER_ID HAVING MAX(ORDER_PRICE) >= '20';

DROP TRIGGER trgUpdatePrice;
DROP TRIGGER trgAfterPromoCode;
---
--- Triggers
---
--- Trigger to Update Prices from Various Tables After Inserting OrderDetails
SELECT * FROM ORDERDETAILS;
SELECT * FROM ORDER;
SELECT * FROM PAYMENT;
CREATE TRIGGER trgUpdatePrice AFTER INSERT ON ORDERDETAILS REFERENCING NEW AS U FOR EACH ROW mode db2sql BEGIN UPDATE ORDERDETAILS SET TOTAL = FOOD_QUANTITY * ( SELECT FOOD_PRICE FROM FOOD WHERE U.FOOD_ID = FOOD.FOOD_ID ) WHERE U.ORDER_ID = ORDERDETAILS.ORDER_ID AND U.FOOD_ID = ORDERDETAILS.FOOD_ID;UPDATE Order Set ORDER_PRICE = (SELECT SUM(TOTAL) FROM ORDERDETAILS WHERE ORDER_ID = U.ORDER_ID) WHERE ORDER_ID = U.ORDER_ID;UPDATE Order SET ORDER_FINALPRICE = Case When PROMO_ID IS NULL then ORDER_PRICE When PROMO_ID IS NOT NULL then ORDER_PRICE - ORDER_PRICE * ( SELECT DISCOUNT_PERCENTAGE FROM PROMOCODE WHERE ORDER.PROMO_ID = PROMOCODE.PROMO_ID) END; UPDATE PAYMENT SET PAYMENT_AMOUNT = (SELECT ORDER_FINALPRICE + ORDER_DELIVERYFEE FROM ORDER WHERE ORDER_ID = U.ORDER_ID)WHERE ORDER_ID = U.ORDER_ID; END;
INSERT INTO ORDERDETAILS VALUES ('UG74836','AG1003',NULL,3,NULL,'NEED MORE SAMBAL');
SELECT * FROM ORDERDETAILS;
SELECT * FROM ORDER;
SELECT * FROM PAYMENT;

---
--- Trigger to Update Prices from Various Tables After Inserting OrderDetails
SELECT * FROM ORDER;
CREATE TRIGGER trgAfterPromoCode AFTER UPDATE OF PROMO_ID ON ORDER FOR EACH ROW mode db2sql UPDATE Order SET ORDER_FINALPRICE = ORDER_PRICE - ORDER_PRICE * ( SELECT DISCOUNT_PERCENTAGE FROM PROMOCODE WHERE ORDER.PROMO_ID = PROMOCODE.PROMO_ID) WHERE ORDER.PROMO_ID IS NOT NULL;
UPDATE ORDER SET PROMO_ID = 'VFDBS37829' WHERE ORDER_ID = 'OU26293';
SELECT * FROM ORDER;

DROP VIEW Prices_View;
DROP VIEW Completed_Order;
---
--- Views
---
--View of Completed Order
CREATE VIEW Completed_Order AS SELECT * FROM (SELECT DISTINCT USER.USER_ID, ORDER.ORDER_ID, DELIVERY.DELIVERY_ID, PAYMENT_AMOUNT, ORDER_STATUS, PICKUP_TIME, DROPOFF_TIME FROM USER, ORDER, PAYMENT, ORDERDETAILS, DELIVERY WHERE (USER.USER_ID = ORDER.USER_ID) AND (PAYMENT.ORDER_ID = ORDER.ORDER_ID) AND (ORDER.ORDER_ID = ORDERDETAILS.ORDER_ID) AND (ORDERDETAILS.DELIVERY_ID = DELIVERY.DELIVERY_ID) AND DROPOFF_TIME IS NOT NULL ORDER BY USER_ID);
SELECT * FROM Completed_Order;

-- View of Price Details of Order ID
CREATE VIEW Prices_View AS SELECT ORDER.ORDER_ID, ORDER_PRICE, ORDER_FINALPRICE, ORDER_DELIVERYFEE, PAYMENT_AMOUNT FROM ORDER, PAYMENT WHERE ORDER.ORDER_ID = PAYMENT.ORDER_ID;
SELECT * FROM Prices_View;

---
--- Subqueries/Nested Queries
---
-- UPDATE ORDER STATUS WHEN THERE IS DROPOFF_TIME
SELECT * FROM ORDER;
UPDATE ORDER SET ORDER_STATUS = 'DELIVERED' WHERE ORDER_ID IN (SELECT DISTINCT ORDERDETAILS.ORDER_ID FROM ORDER, ORDERDETAILS, DELIVERY WHERE (ORDER.ORDER_ID = ORDERDETAILS.ORDER_ID) AND (ORDERDETAILS.DELIVERY_ID = DELIVERY.DELIVERY_ID) AND DROPOFF_TIME IS NOT NULL);
SELECT * FROM ORDER;

-- SHOWS THE DELIVERY DETAILS
SELECT DISTINCT DRIVER.DRIVER_ID, ORDERDETAILS.ORDER_ID, RESTAURANT.RESTAURANT_ID, RESTAURANT_NAME, RESTAURANT_ADDRESS FROM DRIVER, DELIVERY, ORDERDETAILS, FOOD, RESTAURANT WHERE DRIVER.DRIVER_ID IN (SELECT DRIVER_ID FROM DELIVERY WHERE (DELIVERY.DELIVERY_ID = ORDERDETAILS.DELIVERY_ID) AND (ORDERDETAILS.FOOD_ID = FOOD.FOOD_ID) AND (RESTAURANT.RESTAURANT_ID = FOOD.RESTAURANT_ID) )ORDER BY DRIVER.DRIVER_ID;

---
--- Queries Not Covered in Lecture/Tutorial
---
--- Auto Increment by 1
SELECT * FROM USER;
INSERT INTO User (USER_FULLNAME, USER_CONTACT, USER_EMAIL, USER_ADDRESS) VALUES ('ABU ABU','012-1111131','ABUABU@HOTMAIL.COM','No.11, Jalan ABC 11/1, Taman EFG, 12345, Selangor.');
SELECT * FROM USER;

--- Fetch First N Rows
SELECT ORDER.ORDER_ID,ORDER.PROMO_ID,ORDER_PRICE,DISCOUNT_PERCENTAGE, ORDER_FINALPRICE FROM ORDER, PROMOCODE WHERE ORDER.PROMO_ID = PROMOCODE.PROMO_ID ORDER BY DISCOUNT_PERCENTAGE DESC FETCH FIRST 3 ROWS ONLY;

--- Save current time and date
SELECT * FROM ORDER;
INSERT INTO Order VALUES ('DS12312',CURRENT DATE, CURRENT TIME, NULL, NULL, NULL, 'PENDING', 3, NULL);
SELECT * FROM ORDER;

--- GET THE AVERAGE ORDER_PRICE
SELECT MONTH(ORDER_DATE) AS MONTH, CAST(AVG(ORDER_PRICE) AS DECIMAL(6,2)) AS AVERAGE_MONTHLY_SALE FROM ORDER WHERE ORDER_STATUS = 'DELIVERED' GROUP BY MONTH(ORDER_DATE) HAVING AVG(ORDER_PRICE) >= 20;